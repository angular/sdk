(function() {
<%
  const required = (schema.required || []);
  const extras = {
    exceptions: exceptions,
    options: options,
    path: path,
    strings: strings,
    symbols: symbols,
    templates: templates,
  };
%>

const additionalProperties = {};
const additionalPropertyHandler = <%
if (!('additionalProperties' in schema)) { %>null<% } else { %> function() { return (<%=
  templates.subschema(Object.assign({
    name: '???',
    required: false,
    schema: schema.additionalProperties,
  }, extras)) %>); }<%
}
%>;

const handlers = Object.create(null);
<%
  for (const propName of Object.keys(schema.properties)) {
    const _key = JSON.stringify(propName);
    const _name = propName.match(/^[_a-zA-Z][_a-zA-Z0-9]*$/) ? propName : `[${_key}]`;
%>handlers[<%= JSON.stringify(_name) %>] = <%=
  templates.subschema(Object.assign({
    name: _name,
    required: required.indexOf(propName) != -1,
    schema: schema.properties[propName],
  }, extras))
%><%
}
%>

const objectFunctions = {
  hasOwnProperty(name) { return objectProxyHandler.has(null, name); },
};


let defined = false;
const objectProxyHandler = {
  isExtensible() { return false; },
  has(target, prop) {
    return (prop in handlers && handlers[prop].isDefined())
        || (additionalPropertyHandler
            ? (prop in additionalProperties && additionalProperties[prop].isDefined())
            : false);
  },
  get(target, prop) {
    if (prop === symbols.Schema) {
      return objectHandler.schema;
    }
    if (prop in handlers) {
      return handlers[prop].get();
    }
    if (prop in objectFunctions) {
      return objectFunctions[prop];
    }
    return undefined;
  },
  set(target, prop, v) {
    defined = true;
    if (prop in handlers) {
      handlers[prop].set(v);
      return true;
    } else if (additionalPropertyHandler) {
      if (!(prop in additionalProperties)) {
        additionalProperties[prop] = additionalPropertyHandler(prop);
      }
      additionalProperties[prop].set(v);
      return true;
    } else {
      <% if (options.ignoreExtraProperties !== true) {
      %>throw new exceptions.InvalidPropertyNameException(<%= JSON.stringify(path) %> + '/' + prop);<%
      } else {
        // Just ignore the property.
      %>return true;<%
      } %>
    }
  },
  deleteProperty(target, prop) {
    if (prop in handlers) {
      handlers[prop].remove();
      return true;
    } else if (additionalPropertyHandler && prop in additionalProperties) {
      delete additionalProperties[prop];
    }
  },
  defineProperty(target, prop, descriptor) {
    return false;
  },
  getOwnPropertyDescriptor(target, prop) {
    if (prop in handlers) {
      return { configurable: true, enumerable: true };
    } else if (additionalPropertyHandler && prop in additionalPropertyHandler) {
      return { configurable: true, enumerable: true };
    }
  },
  ownKeys(target) {
    return [].concat(
      Object.keys(handlers),
      additionalPropertyHandler ? Object.keys(additionalProperties) : []
    );
  },
};


const proxy = new Proxy({}, objectProxyHandler);

const objectHandler = {
  set(v) {
    if (v === undefined) {
      defined = false;
      return;
    }

    defined = true;
    for (const key of Object.keys(v)) {
      proxy[key] = v[key];
    }

    // Validate required fields.
    <% for (const key of required) { %>
    if (!(<%= JSON.stringify(key) %> in v)) {
      throw new exceptions.RequiredValueMissingException(<%= JSON.stringify(path) %> + '/' + <%= JSON.stringify(key) %>);
    }<% } %>
  },
  get() {
    if (<%= options.allowAccessUndefinedObjects === true %> || this.isDefined()) {
      return proxy;
    } else {
      return <%= 'default' in schema ? JSON.stringify(schema.default) : 'undefined' %>;
    }
  },
  isDefined() {
    return defined
      && (Object.keys(handlers).some(function(x) { return handlers[x].isDefined(); })
          || Object.keys(additionalProperties).some(function(x) {
            return additionalProperties[x].isDefined();
          }));
  },
  remove() { this.set(undefined); },
  schema: <%= JSON.stringify(schema) %>,
};

return objectHandler;

})()
